-Create a repository
-Intialize the repository
-node_modules,package.json,package-lock.json,
-Install Express
-Listen Port 7777
-Write request handlers for /test,/hello
-Install nodemon and update scripts inside package.json
-What is use of "-g" while npm Install
-Difference between and caret and tidle

-initialize git 
-.gitignore
-Create a remote repo on github
-Push all code to github
-Play with routes and routes extensions

-Order of routes is very Important
-Install Postman and make a workspace/colletion >test Api call
-Write logic to handle GET,POST,PATCH,DELETE API Calls and test them on Postman
-Explore and routing  and use of ?,+,(),* in the routes 
-Explore regex in routes /a/ /.fly/
-Reading the query params in routes 
-Reading the dynamic routes 

-multiple Route handlers
-next()
-next fucntion and along with res.send()
-What is middleware ? why do we need it ?
-How express js Basically handles requests behind the scenes
-Difference between app.use and app.all
-Write a dummy auth middleware for  admin
-Write a dummy auth middleware for all  user routes ,excpet /user/login
-Error Handling in app.use 

-Create a free cluster on MongoDB official website(Mongo atlas);
-Install mongoose library
-Connect your application to the Database "Connection-ur"/devTinder
-Call the connectDB function and connect to database before starting application on 7777
-Create User Schema & userModel
-Create POST /signup API to add data to database
-Push some documents using API calls from postman
-Error Handling Using try and catch
-Javascript Object VS JSON (Difference)
-Add the express.json middleware to your app
-Make your signup API dynamic to receive data from end user 
-User.findOne with duplicate email ids which object returned

-API - Get user by email
-API -Feed API - GET/feed -get all users from database
-API - Get User By Id
-Create a delete user API
-Difference between PATCH and PUT 
-API - Update a User 
-Explore mongoose Documentation for model methods
-What are options in Model.findOneUpdate method 
-API -Update the user with email Id


-Explore schematype options from the Documentation
-add required,unique,,lowercase,min,maxLength,minLength,trim
-Add default and array 
-Create a custom validation function for gender
-Improve the DB Shcema - PUT all appropiate validations on each field in Schema
-Add timestamps to userschema
-Add Api validation on PUT Requests and signup post api
-DATA Sanitizing -Add API validation for each field
-Install validdator
-Explore validator library functions and use validator funcs for email,password,photoUrl
-NEVER Trust reb.body


-Validate data in Signup API
-Install bcrypt package
-Create  passwordHash Using bcrypt.hash & save the user is encrypted password
-Create Login API 
-Compare passwords and throw errors if email or password is invalid


-Instal cookie-paraser
-just send dummy cookie to user
-Create GET/profile API and check if you get the cookie back
-Install jsonwebtoken
-In Login API,after email and password validation,create a JWT token  and send it to user in cookie
-read the cookies inside you profile API and find the logged in user
-UserAuth middleware
-Add the UserAuth middleware in profile API and new SendConnectionRequest
-Set the expiry time of JWT token and cookies to 7 days
-Create UserSchema method to getJWT()
-Create UserSchema method to comparePassword(passwordInputByUser)

- Explore Tinder APIS 
- Create a list all API you can think of Dev Tinder
- Group multiple routers under respective routes
- Read the documentation for express.router
- Create Routes folder for  managing auth,profile,request routers
- Create authRouter,profileRouter,requestRouter
- Import these routes in app.js

- Create POST /logout API
- Create PATCH /profile/edit
- Create PATCh /profile/password API =>Forgot password API
- Make you validate all the data in every POST,PATCH APIS




- Create Connection Request Schema 
- Send Connection Request API
- Proper validation For Data
- Think all about corner cases 
- schema.pre("save") function
- $or query $ $and 
- Read more about indexes in mongo db
- Why do we need index in mongo DB ?
- What is advantages and disadvatages of indexes ?
- Read this article about compound indexes










